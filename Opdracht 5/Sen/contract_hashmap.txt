// Hashmap
// verantwoordelijke implementeren: Sen
// verantwoordelijke testen: Arno

// Alle items in de Hashmap hebben hetzelfde type. In dit operation contract
// wordt dit type 'TableItemType' genoemt.
// Een hashmap hasht alle locaties met behulp van een hashfunctie. Deze 
// hashfunctie moet altijd hetzelfde type als input krijgen. In dit operation
// contract verwijzen we naar dit type als KeyType

+createHashmap()
// Maakt een nieuwe hashmap aan
// Precondition: Je wilt een nieuwe hashmap maken.
// Postcondition: Er is een nieuwe hashmap aangemaakt.

+hashfunctie(in searchKey: KeyType) (boolean, index)
// Deze method berekent een index die vasthangt aan een bepaalde zoeksleutel.
// Precondition: Je wilt de index berekenen van een element met als zoeksleutel
// de parameter searchKey.
// Postcondition: Geeft een tuple terug. Indien de eerste waarde true is, is het
// berekenen succesvol verlopen en zal de tweede waarde van de tuple de 
// berekende index bevatten.

+tableInsert(in newItem:TableItemType)  
// Deze method voegt een nieuw item toe op de juiste positie van de 
// datastructuur.
// Precondition: Je wilt een nieuw element toevoegen aan de hashmap.
// Postcondition: Het element is geinsert in de hashmap.

 +tableRetrieve( in searchKey: KeyType) (boolean, tableItem:TableItemType)
// Deze methode geeft een element terug doormiddel van een bepaald zoeksleutel.
// Precondition: Je wilt element retrieve met de searchkey: KeyType.
// Postcondition: Geeft true als tweede element van de tuple wanneer het
// gewenste item is teruggegeven als eerste element van de tuple.

+tableDelete(in searchKey: KeyType): boolean
// Hier kan een element uit de hashmap verwijderd worden.
// Precondition: Je wilt een item met gegeven searchKey verwijderen.
// Postcondition: Geeft true terug als het gewenste item verwijderd is.