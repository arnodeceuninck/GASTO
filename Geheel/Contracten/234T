// 234T: 2-3-4 Boom
// verantwoordelijke implementeren: Tim
// verantwoordelijke testen: Sen

// Een 2-3-4 Boom (234T) is de grootste gebalanceerde boom. Dat wilt zeggen dat
// elke node in de 234T kan een 2-node, 3-node, 4-node. en er dus nodes kunnen
// zijn met 2, 3 of 4 kinderen zijn. Een 234T is ook zo geimplementeerd dat de
// boom zichzelf gaat balanceren. 234TItemType is de soort van data die in de
// boom zit.

+createSearchTree()
// Precondition: Je wilt een 2-3-4 boom aanmaken.
// Postcondition: Er is een lege 2-3-4 aangemaakt.

+destroySearchtree()
// Deze fucntie zal alle verwijzingen en nodes in de boom verwijderen zodat deze
// niet meer bestaat in het geheugen.
// Precondition: Er is een 2-3-4 Boom die je wilt verwijderen.
// Postcondition: De 2-3-4 boom bestaat niet meer samen met alle data die in de
// boom zat.

+isEmpty(): boolean
// Deze functie zal kijken naar de root of tree en als deze niet bestaat dan is
// de zoekboom leeg.
// Precondition: Je hebt een 2-3-4 Boom waarvan je wilt weten of deze leeg is of
// niet.
// Postcondition: De functie zal een boolean teruggeven die vermeld of de 2-3-4
// boom leeg is of niet, geeft true als de boom leeg is, false als er data in de
// boom zit.

+T23Insert(in newItem: 234TItemType, in key: integer): boolean
// Je hebt een nieuwe waarde en je wilt deze toevoegen aan de 2-3-4 boom dan zal
// deze functie ervoor zorgen dat de data op de juiste plek komt.
// Precondition: Je hebt een item met een datatype dat overeenkomt met de
// andere items van de 2-3-4 Boom. Er word ook een unieke key meegegeven die
// overeenkomt met de data die opgeslagen word.
// Postcondition: Het element zal toegevoegd zijn op de juiste locatie in de 2-3-4
// boom en de structuur is nog nogsteeds correct. ook word er een boolean
// teruggeven die zegt of de operatie gelukt is of niet.

+T234Delete(in key: integer): boolean
// Als je een bepaald element wilt verwijderen uit de 2-3-4 boom dan zal deze
// functie daarvoor zorgen.
// Precondition: Je wilt een element verwijderen met de zoekkey: key.
// Postcondition: Het element met de parameter key: integer wordt verwijdert uit de 2-3-4 boom. Er wordt een boolean terug gegeven die aantoont of de
// operatie gelukt is.

+retrieve(in key: integer): (234TItemType, boolean)
// Deze operatie zal aan de hand van de key de overeenkomtstige data teruggeven
// Precondition: Je hebt de key van de data die je uit de 234T wilt halen en deze
// zit in de 234T
// Postcondition: De operatie zal de data uit de 234T halen en deze teruggeven,
// er zal ook een boolean teruggeven worden die zegt of de operatie gelukt is.

+getRoot(): 234TItemType
// De operatie zal het item dat in de root zit teruggeven.
// Precondition: Je hebt een 234T waarvan je wilt je weten wat er in de root zit.
// Postcondition: De waarde dat in de root van de 234T zit word teruggeven.

+inorderTraverse(in visit: function, in key: string): boolean
// De inorderTraverse zal elke node in de 234T op een inorder volgorde overlopen
// en parameter functie zal op elks worden uitgevoerd.
// Precondition: Je hebt een functie die je op elke node in de 234T wilt toepassen
// ook is er een key als de functie deze nodig heeft
// de 234T zal dan in inorder volgorde worden overlopen zodat alle nodes worden
// bereikt.
// Postcondition: Elke node in de 234T zal overlopen zijn en de fucntie erop
// toegepast, er word ook een boolean teruggeven die zegt of de operatie gelukt is.

+preorderTraverse(in vist: function, in key: string): boolean
// Alle nodes worden overlopen in een preorder manier en de visit functie word er op
// toegepast.
// Precondition: Er is een 234T waarop je de visit fucntie wilt toepassen om zo
// elke node aan te passen in een preoder volgorde. ook is er een key als de
// functie deze nodig heeft
// Postcondition: de 234T zal op een preorder manier aangepast zijn en er word
// een boolean terug gegeven die zegt of die operatie succesvol was.

+postorderTraverse(in visit: function): boolean
// Alle nodes worden overlopen in een postorder manier en de visit functie word er op
// toegepast.
// Precondition: Er is een 234T waarop je de visit fucntie wilt toepassen om zo
// elke node aan te passen in een postorder volgorde.
// ook is er een key als de functie deze nodig heeft.
// Postcondition: de 234T zal op een postorder manier aangepast zijn en er word
// een boolean terug gegeven die zegt of die operatie succesvol was.

+split(): boolean
// Als we bij het inserten een node met 3 elementen dan zullen deze node moeten
// opsplitsen om de gebalanceerde structuur te behouden.
// Precondition: We zitten in een node met 3 elementen
// Postcondition: de node is nu opgesplitst en de gebalanceerde structuur is er
// nogsteeds

+inorder1(): TreeItem
// Als we de inorder succesor moeten hebben van het eerste element in een node
// dan roepen we deze functie op
// Precondition: we hebben een node met 1, 2 of 3 items waar we van het eerste
// item een inorder successor willen hebben
// Postcondition: we krijgen de inorder succesor van het eerste element

+inorder2(): TreeItem
// Als we de inorder succesor moeten hebben van het tweede element in een node
// dan roepen we deze functie op
// Precondition: we hebben een node met 2 of 3 items waar we van het tweede
// item een inorder successor willen hebben
// Postcondition: we krijgen de inorder succesor van het tweede element

+inorder3(): TreeItem
// Als we de inorder succesor moeten hebben van het derde element in een node
// dan roepen we deze functie op
// Precondition: we hebben een node met 3 items waar we van het derde
// item een inorder successor willen hebben
// Postcondition: we krijgen de inorder succesor van het derde element

+redistribute(left, right, mleft, mright)():
// Als we bij het fixen van een lege node een sibling hebben met 2 of 3 elementen
// dan verdelen we de elementen
// Precondition: we zitten in een lege lijst en we hebben een sibling met 2 of meer
// elementen
// Postcondition: de lege node heeft terug een element en de structuur is behouden

+redistributeInternal(left, right, mleft, mright)():
// Als we bij het fixen van een lege node een sibling hebben met 2 of 3 elementen
// dan verdelen we de elementen, ook ook heeft de node nog kinderen
// Precondition: we zitten in een lege lijst en we hebben een sibling met 2 of 3
// elementen, ook worden de kinderen herverdeeld
// Postcondition: de structuur van de boom is herstelt

+merge(left, mleft, mright, right)():
// Als we bij het fixen van een boom een lege node tegekomen en de sibling heeft
// geen reserve elementen dan zullen we de parent mergen
// precondition: We zitten in een lege node en de sibling heeft geen reserve
// elementen, en er zijn geen kinderen
// Postcondition: De parent is met de sibling gemerged en de lege node is
// verwijderd

+mergeInternal(left, mleft, mright, right)():
// Als we bij het fixen een lege node tegenkomen met kinderen en de sibling heeft
// geen extra elementen dan word er gemerged
// precondition: er is een lege node met geen sibling met reserve elementen en
// de node heeft kinderen
// Postcondition: de parent is gemerged en de kinderen zijn verplaatst

+print(in str: nummer):
// deze functie zal een dot bestand aanmaken waarin we de 234 boom zullen printen
// Precondition: We hebben een boom die we willen afprinten
// Postcondition: we krijgen een dot file met de structuur van de 234 boom

+dotread(in string: file):
// Deze functie bouwt de structuur van de 234boom in dotlanguage
// Precondition: er is een al een file geopend in python waar we kunnen in schrijven
// er is ook een boom waar we de structuur van kunnen uittekenen en deze boom is
// niet leeg
// Postcondition: de geopende file is aangevuld met dotlanguage die de structuur
// van de boom voorstelt

+traverse(in visit: function, in key: string):
// deze functie overloopt de boom in een inorder manier
// Precondition: we hebben een functie om de boom te overlopen en een key
// als de functie het nodig heeft
// Postcondition: De boom is overlopen met de gegeven functie en key

+getIndex(in index: int) TreeItemType:
// deze functie geeft het item terug dat op een index in de boom zit
// Precondition: we hebben een index van de boom waar we weten dat er een element
// in zit
// Postcondition: De functie geeft een TreeItemType terug dat op die bepaalde
// locatie zit

+size() int:
// De functie geeft terug hoeveel elementen er in de boom zitten
// Precondition: we hebben een boom waar we de hoeveelheid elementen van willen
// hebben
// Postcondition: geeft de hoeveelheid elementen dat er in boom zitten terug
