// DLC: Double Linked Chain
// verantwoordelijke implementeren: Tim
// verantwoordelijke testen: Rob

// De dubbelgelinkte ketting kan overlopen worden naar 2 kanten waardoor we 
// gemakkelijker terug naar de head van de ketting kunnen. Vanuit iedere node 
// kunnen we dus zowel naar de vorige als naar de volgende node gaan.

+createDLC()
// Precondition: Je wil een nieuwe DLC aanmaken. 
// Postcondition: er word een nieuwe dubbel gelinkte ketting aangemaakt met een 
// head pointer die verwijst naar een dummyhead.

+destroyDLC()
// Precondition: Een dubbel gelinkte ketting die verwijderd moet worden.
// Postcondition: De huidige dubbelgelinkte lijst wordt verwijderd samen met alle 
// verwijzingen ernaar.

+retrieve(in key: integer, out value: DataType)
// We zullen in de ketting zoeken naar de key en de waarde die hiermee verbonden is returnen.
// Precondition: Een key is een Integer die uniek is voor een overeenkomstig datatype, 
// dit datatype is wat je wil zoeken met de key.
// Postcondtion: Er zal een datatype terug gegeven worden, waarvan de zoeksleutel
// overeenkomt met de meegegeven key. 

+isEmpty(): boolean
// We kijken of de gelinkte ketting leeg is of niet.
// Precondition: Een dubbelgelinkte lijst waar je van wilt weten of hij leeg is, 
// de head pointer en dummyhead tellen niet mee.
// Postcondition: Er wordt een boolean gereturned die weergeeft of de gelinkte 
// ketting leeg is of niet. Als de boolean true is, dan is de gelinkte ketting leeg.

+insert(in value: DataType, in key: integer): boolean
// De functie zal een nieuwe node toevoegen achteraan de ketting en de ketting sorteren.
// Precondition: Als parameters hebben we value en key, de value is datgene wat we 
// eigenlijk willen toevoegen aan de ketting. De key geven we mee om de value 
// terug te kunne vinden en de DLC te kunnen sorteren.
// Postcondition: We krijgen een lijst waarbij een extra node is toegevoegd. 
// Na elke insert word de lijst ook automatisch gesorteerd
// en we krijgen een bool die laat zien of de operatie succesvol was.

+traverse(in visit: function)
// We zullen elk element in de ketting doorlopen en hierop de functie visit toepassen.
// Precondition: Er is een ketting die getraversed kan worden. Function is een 
// functie die toepasbaar is op nodes.
// Postcondition: De functie visit is toegepast op alle waarden in de DLC op
// volgorde, beginnend bij het eerste element en eindigend bij het laatste element.

+delete(in key: intiger): boolean
// Deze functie zal de node met de overeenkomende key verwijderen uit de DLC.
// Precondition: We hebben een key van de value die we willen verwijderen, genaamd key.
// Postcondition: De node zal verwijderd zijn uit de lijst en de ketting zal het 
// gat tussen de vorige node en de volgende node opgevuld hebben.
// Er word ook een bool teruggegeven die laat zien of de operatie succesvol was.
// Indien de operatie niet succesvol was, is het mogelijk dat de node niet uit 
// de lijst verwijderd is.







