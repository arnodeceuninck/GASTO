// DotConversion
// verantwoordelijke implementeren: Tim
// verantwoordelijke testen: Arno

// Deze classe bevat een verzameling van punten en verbindingen tussen punten.
// Bovendien kan er van een element van deze klasse heel makkelijk een 
// DOT-file gemaakt worden.

+createGraph()
// Precondition: Je wil een nieuwe graaf maken.
// Postcondition: Er is een nieuwe graaf aangemaakt met alle waarden ingesteld
// als de defaultwaarden. Deze graaf bevat dus nog geen knopen en geen 
// verbindingen. De default rankdirection is van links naar rechts.

+addNode(in name: string, in labelElements: string or array, in shape: string): boolean
// Precondition: Je wil een nieuwe knoop toevoegen aan de graaf met de naam 
// naam, met als label label_elements. Dit kan zowel een string als een array
// van strings zijn. In dit tweede geval zal een knoop meerdere elementen 
// bevatten. Shape is de vorm die je wil geven aan de node. Je kan hiervoor
// kiezen uit alle vormen die je in dot files kan gebruiken.
// Postcondition: De node is met de bijhorende gegevens toegevoegd aan de lijst
// met nodes van de graaf indien de gereturnde waarde true is.

+removeNode(in name: string): boolean
// Precondition: Je wil de node met de naam name verwijderen. Er bestaan geen 
// verbindingen meer die uit deze node vertrekken of toekomen in deze node.
// Postcondition: De node met de naam name is verwijderd.

+addConnection(in nodeFrom: string, in nodeTo: string, in type: string): boolean
// Precondition: Je wil een verbinding toevoegen tussen twee nodes. nodeFrom
// is de naam van de node vanwaar de verbinding vertrekt. nodeTo is de naam van
// de node waar je naartoe gaat. Type is het type van verbinding. Dit kan '->' 
// zijn als je een verbinding hebt die gericht moet zijn of '--' als je een 
// verbinding hebt die niet gericht moet zijn.
// Postcondition: Er is een nieuwe verbinding tussen de 2 nodes toegevoegd aan
// de graaf met de bijhorende info. 

+removeConnection(in name: nodeFrom, in name: nodeTo, in type: string): boolean
// Precondition: Er bestaat een verbinding van het type type van node nodeFrom
// naar node nodeTo en je wil deze verbinding verwijderen.
// Postcondition: De verbinding is verwijderd. 

+findConnections(in node): array
// Precondition: node is een node die in de graaf zit.
// Postcondition: De array die gereturnd wordt bevat een lijst van alle 
// verbindingen tussen node en een andere node. Deze verbindingen zijn telkens
// een tuple met als eerste waarde de node waaruit de verbinding vertrekt, als
// tweede waarde de node waar de verbinding toekomt en als derde waarde het
// type van de verbinding.


